---
- name: Manage remote Linux client
  hosts: all
  gather_facts: true
  vars:
    admin_group_map:
      Alpine: wheel
      AlmaLinux: wheel
      CentOS: wheel
      Debian: sudo
      Fedora: wheel
      Linuxmint: sudo
      RedHat: wheel
      Rocky: wheel
      SLES: wheel
      "openSUSE Leap": wheel
      Ubuntu: sudo
  tasks:
    - name: "01 Set admin group based on distribution"
      ansible.builtin.set_fact:
        admin_group: "{{ admin_group_map[ansible_distribution] | default('sudo') }}"

    - name: "02 Gather service facts"
      ansible.builtin.service_facts:

    - name: "03 Detect display manager"
      ansible.builtin.set_fact:
        display_manager: >-
          {% set svc = ansible_facts.services %}
          {% if 'gdm.service' in svc or 'gdm3.service' in svc %}
          gdm
          {% elif 'lightdm.service' in svc %}
          lightdm
          {% elif 'sddm.service' in svc %}
          sddm
          {% elif 'lxdm.service' in svc %}
          lxdm
          {% else %}
          unknown
          {% endif %}

    - name: "04 Debug system information"
      ansible.builtin.debug:
        msg: "Distribution: {{ ansible_distribution }} {{ ansible_distribution_version }}, Display Manager: {{ display_manager }}"

    - name: "05 Check if ironscope user already exists"
      ansible.builtin.command: id -u ironscope
      register: ironscope_user_check
      failed_when: false
      changed_when: false

    - name: "06 Ensure ironscope user exists with admin privileges"
      ansible.builtin.user:
        name: ironscope
        groups: "{{ admin_group }}"
        append: true
        create_home: true
        password: "{{ 'iron' | password_hash('sha512') }}"
        shell: /bin/bash
        password_expired: true   # anstelle von 'password_expire'
        update_password: on_create
      when: ironscope_user_check.rc != 0

    - name: "07 Mark that ironscope user is available"
      ansible.builtin.set_fact:
        ironscope_user_exists: "{{ (created_ironscope_user is defined and created_ironscope_user.changed) or (ironscope_user_check.rc == 0) }}"

    - name: "08 Update system packages"
      block:
        - name: "08a Update Debian-based systems"
          ansible.builtin.apt:
            update_cache: true
            upgrade: dist
          when: ansible_os_family == 'Debian'

        - name: "08b Update RedHat-based systems"
          ansible.builtin.yum:
            name: '*'
            state: latest
          when: ansible_os_family == 'RedHat'

        - name: "08c Update SUSE-based systems"
          ansible.builtin.zypper:
            name: '*'
            state: latest
            update_cache: true
          when: ansible_os_family == 'Suse'

        - name: "08d Update Alpine-based systems"
          community.general.apk:
            update_cache: true
            upgrade: yes
          when: ansible_os_family == 'Alpine'

    - name: "09 Check if rclone is installed"
      ansible.builtin.stat:
        path: /usr/bin/rclone
      register: rclone_binary

    - name: "10 Install rclone"
      block:
        - name: "10a Install rclone on Debian-based systems"
          ansible.builtin.apt:
            name: rclone
            state: present
            update_cache: true
          when:
            - ansible_os_family == 'Debian'
            - not rclone_binary.stat.exists

        - name: "10b Install rclone on RedHat-based systems"
          ansible.builtin.yum:
            name: rclone
            state: present
          when:
            - ansible_os_family == 'RedHat'
            - not rclone_binary.stat.exists

        - name: "10c Install rclone on SUSE-based systems"
          ansible.builtin.zypper:
            name: rclone
            state: present
            update_cache: true
          when:
            - ansible_os_family == 'Suse'
            - not rclone_binary.stat.exists

        - name: "10d Install rclone on Alpine-based systems"
          community.general.apk:
            name: rclone
            state: present
            update_cache: true
          when:
            - ansible_os_family == 'Alpine'
            - not rclone_binary.stat.exists

    - name: "11 Check if onedrive directory exists"
      ansible.builtin.stat:
        path: /home/ironscope/onedrive
      register: onedrive_dir
      become: true
      become_user: ironscope
      failed_when: false
      changed_when: false
      when: ironscope_user_exists

    - name: "12 Create onedrive directory for ironscope"
      ansible.builtin.file:
        path: /home/ironscope/onedrive
        state: directory
        owner: ironscope
        group: ironscope
        mode: '0755'
      when:
        - ironscope_user_exists
        - not onedrive_dir.stat.exists

    - name: "13 Check if ironscope bashrc exists"
      ansible.builtin.stat:
        path: /home/ironscope/.bashrc
      register: ironscope_bashrc
      when: ironscope_user_exists

    - name: "14 Deploy colorful bashrc for ironscope user"
      ansible.builtin.template:
        src: templates/bashrc.j2
        dest: /home/ironscope/.bashrc
        owner: ironscope
        group: ironscope
        mode: '0644'
      when:
        - ironscope_user_exists
        - not ironscope_bashrc.stat.exists
